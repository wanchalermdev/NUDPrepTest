{"version":3,"file":"cdk-overlay.umd.js","sources":["../../src/cdk/overlay/index.ts","../../src/cdk/overlay/public_api.ts","../../src/cdk/overlay/fullscreen-overlay-container.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/connected-position-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/overlay-state.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy} from './public_api';\n\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './overlay-container';\nexport {MD_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc,MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe,MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd} from './overlay-directives';\nexport {OverlayPositionBuilder as ɵf} from './position/overlay-position-builder';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {Overlay} from './overlay';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayDirective,\n  MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  OverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {ScrollStrategyOptions} from './scroll/scroll-strategy-options';\n\n\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\n\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef} from './overlay-ref';\nexport {OverlayState} from './overlay-state';\nexport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nexport {ViewportRuler} from '@angular/cdk/scrolling';\nexport {ComponentType} from '@angular/cdk/portal';\n\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange} from './position/connected-position';\nexport {Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy} from './scroll/index';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nexport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Overlay} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayState} from './overlay-state';\nimport {\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n} from './position/connected-position';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {RepositionScrollStrategy, ScrollStrategy} from './scroll/index';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nconst defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n */\nexport const MD_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-connected-overlay-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal<any>;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener = () => {};\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number { return this._offsetX; }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() { return this._offsetY; }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() { return this._hasBackdrop; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOrigin(): OverlayOrigin { return this.origin; }\n/**\n * @param {?} _origin\n * @return {?}\n */\nset _deprecatedOrigin(_origin: OverlayOrigin) { this.origin = _origin; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPositions(): ConnectionPositionPair[] { return this.positions; }\n/**\n * @param {?} _positions\n * @return {?}\n */\nset _deprecatedPositions(_positions: ConnectionPositionPair[]) { this.positions = _positions; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOffsetX(): number { return this.offsetX; }\n/**\n * @param {?} _offsetX\n * @return {?}\n */\nset _deprecatedOffsetX(_offsetX: number) { this.offsetX = _offsetX; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOffsetY(): number { return this.offsetY; }\n/**\n * @param {?} _offsetY\n * @return {?}\n */\nset _deprecatedOffsetY(_offsetY: number) { this.offsetY = _offsetY; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedWidth(): number | string { return this.width; }\n/**\n * @param {?} _width\n * @return {?}\n */\nset _deprecatedWidth(_width: number | string) { this.width = _width; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedHeight(): number | string { return this.height; }\n/**\n * @param {?} _height\n * @return {?}\n */\nset _deprecatedHeight(_height: number | string) { this.height = _height; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMinWidth(): number | string { return this.minWidth; }\n/**\n * @param {?} _minWidth\n * @return {?}\n */\nset _deprecatedMinWidth(_minWidth: number | string) { this.minWidth = _minWidth; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMinHeight(): number | string { return this.minHeight; }\n/**\n * @param {?} _minHeight\n * @return {?}\n */\nset _deprecatedMinHeight(_minHeight: number | string) { this.minHeight = _minHeight; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedBackdropClass(): string { return this.backdropClass; }\n/**\n * @param {?} _backdropClass\n * @return {?}\n */\nset _deprecatedBackdropClass(_backdropClass: string) { this.backdropClass = _backdropClass; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedScrollStrategy(): ScrollStrategy { return this.scrollStrategy; }\n/**\n * @param {?} _scrollStrategy\n * @return {?}\n */\nset _deprecatedScrollStrategy(_scrollStrategy: ScrollStrategy) {\n    this.scrollStrategy = _scrollStrategy;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOpen(): boolean { return this.open; }\n/**\n * @param {?} _open\n * @return {?}\n */\nset _deprecatedOpen(_open: boolean) { this.open = _open; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedHasBackdrop() { return this.hasBackdrop; }\n/**\n * @param {?} _hasBackdrop\n * @return {?}\n */\nset _deprecatedHasBackdrop(_hasBackdrop: any) { this.hasBackdrop = _hasBackdrop; }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open'] || changes['_deprecatedOpen']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    const /** @type {?} */ positionStrategy = this._position = this._createPositionStrategy();\n    const /** @type {?} */ overlayConfig = new OverlayState({\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._escapeListener();\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._escapeListener();\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_CONNECTED_OVERLAY_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input, args: ['cdkConnectedOverlayOrigin', ] },],\n'positions': [{ type: Input, args: ['cdkConnectedOverlayPositions', ] },],\n'offsetX': [{ type: Input, args: ['cdkConnectedOverlayOffsetX', ] },],\n'offsetY': [{ type: Input, args: ['cdkConnectedOverlayOffsetY', ] },],\n'width': [{ type: Input, args: ['cdkConnectedOverlayWidth', ] },],\n'height': [{ type: Input, args: ['cdkConnectedOverlayHeight', ] },],\n'minWidth': [{ type: Input, args: ['cdkConnectedOverlayMinWidth', ] },],\n'minHeight': [{ type: Input, args: ['cdkConnectedOverlayMinHeight', ] },],\n'backdropClass': [{ type: Input, args: ['cdkConnectedOverlayBackdropClass', ] },],\n'scrollStrategy': [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy', ] },],\n'open': [{ type: Input, args: ['cdkConnectedOverlayOpen', ] },],\n'hasBackdrop': [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop', ] },],\n'_deprecatedOrigin': [{ type: Input, args: ['origin', ] },],\n'_deprecatedPositions': [{ type: Input, args: ['positions', ] },],\n'_deprecatedOffsetX': [{ type: Input, args: ['offsetX', ] },],\n'_deprecatedOffsetY': [{ type: Input, args: ['offsetY', ] },],\n'_deprecatedWidth': [{ type: Input, args: ['width', ] },],\n'_deprecatedHeight': [{ type: Input, args: ['height', ] },],\n'_deprecatedMinWidth': [{ type: Input, args: ['minWidth', ] },],\n'_deprecatedMinHeight': [{ type: Input, args: ['minHeight', ] },],\n'_deprecatedBackdropClass': [{ type: Input, args: ['backdropClass', ] },],\n'_deprecatedScrollStrategy': [{ type: Input, args: ['scrollStrategy', ] },],\n'_deprecatedOpen': [{ type: Input, args: ['open', ] },],\n'_deprecatedHasBackdrop': [{ type: Input, args: ['hasBackdrop', ] },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._scrollStrategy;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {DomPortalHost} from '@angular/cdk/portal';\nimport {OverlayState} from './overlay-state';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OverlayContainer} from './overlay-container';\nimport {ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    const /** @type {?} */ pane = this._createPaneElement();\n    const /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, this._ngZone);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config?: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: '', left: '' };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay\n * to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  enable: () => void;\n  disable: () => void;\n  attach: (overlayRef: OverlayRef) => void;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nexport function getMdScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf, OnDestroy} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      if (this._themeClass) {\n        this._containerElement.classList.remove(this._themeClass);\n      }\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n/**\n * \\@docs-private\n */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayRef} from '../overlay-ref';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n/**\n * The overlay to which this strategy is attached.\n */\nprivate _overlayRef: OverlayRef;\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement | null = null;\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef): void {\n    this._overlayRef = overlayRef;\n  }\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New top offset.\n * @return {?}\n */\ntop(value = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New left offset.\n * @return {?}\n */\nleft(value = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New bottom offset.\n * @return {?}\n */\nbottom(value = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New right offset.\n * @return {?}\n */\nright(value = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?=} value New width for the overlay\n * @return {?}\n */\nwidth(value = ''): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?=} value New height for the overlay\n * @return {?}\n */\nheight(value = ''): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @return {?} Resolved when the styles have been applied.\n */\napply(): void {\n    const /** @type {?} */ element = this._overlayRef.overlayElement;\n\n    if (!this._wrapper && element.parentNode) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/**\n * The overlay to which this strategy is attached.\n * @type {?}\n */\nGlobalPositionStrategy.prototype._overlayRef;\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange,\n  ScrollingVisibility,\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {OverlayRef} from '../overlay-ref';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n/**\n * The overlay to which this strategy is attached.\n */\nprivate _overlayRef: OverlayRef;\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} originPos\n * @param {?} overlayPos\n * @param {?} _connectedTo\n * @param {?} _viewportRuler\n */\nconstructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\nprivate _connectedTo: ElementRef,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef): void {\n    this._overlayRef = overlayRef;\n    this._pane = overlayRef.overlayElement;\n  }\n/**\n * Performs any cleanup after the element is destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @return {?} Resolves when the styles have been applied.\n */\napply(): void {\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ element = this._pane;\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint | undefined;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair | undefined;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        return;\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, /** @type {?} */(( fallbackPoint)), /** @type {?} */(( fallbackPosition)));\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate _getScrollVisibility(overlay: HTMLElement): ScrollingVisibility {\n    const /** @type {?} */ originBounds = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayBounds = overlay.getBoundingClientRect();\n    const /** @type {?} */ scrollContainerBounds =\n        this.scrollables.map(s => s.getElementRef().nativeElement.getBoundingClientRect());\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n\n    // Notify that the position has been changed along with its change properties.\n    const /** @type {?} */ scrollableViewProperties = this._getScrollVisibility(element);\n    const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n    this._onPositionChange.next(positionChange);\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/**\n * The overlay to which this strategy is attached.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._overlayRef;\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea: number;\n  fitsInViewport: boolean;\n}\n","\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const /** @type {?} */ outsideAbove = element.bottom < containerBounds.top;\n    const /** @type {?} */ outsideBelow = element.top > containerBounds.bottom;\n    const /** @type {?} */ outsideLeft = element.right < containerBounds.left;\n    const /** @type {?} */ outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const /** @type {?} */ clippedAbove = element.top < scrollContainerRect.top;\n    const /** @type {?} */ clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const /** @type {?} */ clippedLeft = element.left < scrollContainerRect.left;\n    const /** @type {?} */ clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollingVisibility_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollingVisibility.prototype.isOriginClipped;\n/** @type {?} */\nScrollingVisibility.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollingVisibility.prototype.isOverlayClipped;\n/** @type {?} */\nScrollingVisibility.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollingVisibility) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollingVisibility, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '@angular/cdk/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement | null = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) {\n\n    if (_state.scrollStrategy) {\n      _state.scrollStrategy.attach(this);\n    }\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n\n    if (this._state.scrollStrategy) {\n      this._state.scrollStrategy.enable();\n    }\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      if (Array.isArray(this._state.panelClass)) {\n        this._state.panelClass.forEach(cls => this._pane.classList.add(cls));\n      } else {\n        this._pane.classList.add(this._state.panelClass);\n      }\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._state.scrollStrategy) {\n      this._state.scrollStrategy.disable();\n    }\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    if (this._state.scrollStrategy) {\n      this._state.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply();\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', /** @type {?} */(( this._state.direction)));\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n\n    if (this._state.maxWidth || this._state.maxWidth === 0) {\n      this._pane.style.maxWidth = formatCssUnit(this._state.maxWidth);\n    }\n\n    if (this._state.maxHeight || this._state.maxHeight === 0) {\n      this._pane.style.maxHeight = formatCssUnit(this._state.maxHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._state.backdropClass) {\n      this._backdropElement.classList.add(this._state.backdropClass);\n    } /** @type {?} */((\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) { /** @type {?} */((\n      this._pane.parentNode)).appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._state.backdropClass) {\n        backdropToDetach.classList.remove(this._state.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy?: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop?: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass?: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth?: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight?: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth?: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight?: number | string;\n/**\n * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nmaxWidth?: number | string;\n/**\n * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nmaxHeight?: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection?: Direction = 'ltr';\n/**\n * @param {?=} state\n */\nconstructor(state?: OverlayState) {\n    if (state) {\n      Object.keys(state).forEach(key => this[key] = state[key]);\n    }\n  }\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayState.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.maxWidth;\n/**\n * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.maxHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["Input","TemplateRef","Renderer2","Directive","ElementRef","Injector","ApplicationRef","ComponentFactoryResolver","ViewportRuler","ScrollDispatcher","Optional","SkipSelf","Injectable","Subject"],"mappings":"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"}